#!/usr/bin/env python3

import sys
import logging
import structlog
from structlog.stdlib import LoggerFactory
import argparse
import json
import re
import pint
import random
import math
from requests_toolbelt import sessions
from requests_toolbelt.utils import dump as request_dump
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from tabulate import tabulate
from copy import deepcopy
from cachecontrol.caches.file_cache import FileCache
from xdg import XDG_CACHE_HOME
import os
import pptree
from collections import defaultdict
import pyparsing
import js2py

from partsfinder.datamodel import *
from partsfinder.backends.eu_tme import EuTmeSession

ureg = pint.UnitRegistry()

#
# Parse command line arguments
#

parser = argparse.ArgumentParser(description='Parametric parts search on the Transfer-Multisort Elektronik site')
parser.add_argument('--verbose', '-v', dest='loglevel', action='store_const', const=logging.INFO, default=logging.WARN, help="Verbose information")
parser.add_argument('--debug', '-d', dest='loglevel', action='store_const', const=logging.DEBUG, help="Debug information")
parser.add_argument("--tls-noverify", action='store_true', default=False, help="Disable TLS certificate verification (DANGEROUS!!!)")
parser.add_argument('--country', dest='country_code', metavar='CODE', default=None,
                    help='Select your country code')
parser.add_argument('--lang', dest='language_code', metavar='CODE', default='en',
                    help='Select your language code')
parser.add_argument('--baseurl', dest='base_url', metavar="URL", default='https://www.tme.eu/',
                    help='Select the base URL for accessing the TME.eu site')
parser.add_argument('--currency', default='USD', help="The currency used for price calculation")
parser.add_argument("--json", dest='json_output', action='store_true', default=False, help="Output data as JSON")

sp = parser.add_subparsers(dest='cmd')

parser_categories = sp.add_parser("categories", help="Part categories information")
parser_categories.add_argument("-t", "--tree", dest='print_tree', action='store_true', default=False,
                            help="Print categories as a tree")

parser_params = sp.add_parser("parameters", help="Information about parameters for each category")
parser_params.add_argument("categories", metavar="ID", nargs="+")
parser_params.add_argument("--all-values", action='store_true', help="Print all possible values")

parser_parts = sp.add_parser("parts", help="Parts information")
parser_parts.add_argument("-c", "--category", dest='cat_id', metavar="ID", required=True, help="Category identifier")
parser_parts.add_argument("--param", "-P", dest="constraints", nargs="+", help="Parameter constraint, use -P help for additional information")
parser_parts.add_argument("--sort-field", '-S', help="Parameter name to use for sorting")
parser_parts.add_argument("--sort-order", choices=['asc', 'dsc'], default='asc', help="Direction of sorting")
parser_parts.add_argument("--limit", dest='item_limit', default=20, help="Number of items returned")
parser_parts.add_argument("-A", "--amount", default=1, type=int, help="Order amount (used to filter based on MOQ and calculte prices)")
parser_parts.add_argument("--all", dest='all_parts', default=False, action='store_true', help="Print all matching parts")

args = parser.parse_args()

# TODO: File or environment based configuration code can be put here
config = args

logging.basicConfig(stream=sys.stderr, level=config.loglevel)
structlog.configure(logger_factory=LoggerFactory())

log = structlog.get_logger()

log.info("start", config=vars(config))

with EuTmeSession(lang=config.language_code) as s:

    if config.tls_noverify:
        s.verify = False

    if config.cmd == 'categories':

        if config.print_tree:

            class NodeDict(defaultdict):

                def __missing__(self, key):
                    cat = s.categories[key]
                    if len(cat['path']) > 0:
                        parent_id = str(cat['path'][-2])
                        parent = nodes[parent_id]
                    else:
                        parent = None

                    cat_name = cat.get('meta', {'name': '/'})['name']
                    label = "{} {}".format(key, cat_name)
                    self[key] = pptree.Node(label, parent=parent)

            nodes = NodeDict()

            # Build the tree
            for id in s.categories.keys():
                nodes[id]

            pptree.print_tree(nodes['0'])

        else:
            if config.json_output:
                print(json.dumps(s.categories))
            else:
                rows=[]
                for (cat_id, cat) in s.categories.items():
                    if 'meta' not in cat:
                        continue
                    print("{} {}".format(cat_id, cat['meta']['name']))

    if config.cmd == 'parameters':

        v_label = None
        for cat_id in config.categories:
            param_space = s.build_parameter_space(s.categories[cat_id])

            rows = []
            for (param_id, param) in param_space.items():
                if config.all_values:
                    v = param.all_values
                    v_label = "All values"
                else:
                    v = param.example_values
                    v_label = "Example values"

                if param.unit != None:
                    unit = param.unit
                else:
                    unit = ''

                rows.append([
                    param.name,
                    unit,
                    ', '.join(v)
                ])
            print(tabulate(rows, headers=["Parameter", "Unit", v_label]))

    if config.cmd == "parts":

        #
        # Simple query language grammar.
        #
        # Consider using https://github.com/matannoam/SimpleQuery for a query language
        #
        identifier = pyparsing.QuotedString('"')
        operator = (
            pyparsing.Literal("==") |
            pyparsing.Literal("!=") |
            pyparsing.Literal("<") |
            pyparsing.Literal(">")
        )
        value = pyparsing.QuotedString('"')
        match_format = identifier + operator + value

        cat_id = config.cat_id
        cat = s.categories[cat_id]
        param_space = s.build_parameter_space(cat)

        for pred in config.constraints:

            match = match_format.parseString(pred)

            # Lookup parameter
            param_name = match[0]
            param = param_space.find_param(param_name)
            if param is None:
                log.warn('unknown parameter', param_name=param_name)
                continue

            op = match[1]
            value = match[2]

            pf = None
            if op == '==':
                pf = lambda v: v == value
            elif op == '!=':
                pf = lambda v: v != value
            elif op == '<':
                pf = lambda v: v < value
            elif op == '>':
                pf = lambda v: v > value
            else:
                raise ValueError("Operator {} was unexpected".format(op))

            log.info('appying parameter constraint', predicate=pred)
            param.constrain(pf)

        parts_found = s.lookup_parts(cat, param_space)

        pricing_data = s.lookup_pricing(parts_found)

        for part in parts_found.values():
            pd = pricing_data[part['symbol']]

            def get_unit_price(prices, amount):
                amount_levels = sorted(prices.keys())

                try:
                    amount_level = next(filter(lambda a: amount >= a, amount_levels))
                    return prices[amount_level]
                except StopIteration:
                    return None

            def format_pricing(pd):
                return '\n'.join( map(lambda k: "{}+: {}".format(k, pd['pricing'][k]), pd['pricing'].keys()) )

            # Calculate the amount that needs to be ordered taking into account the MOQ and multiplier
            amount = min(config.amount, pd['stock'])
            part['amount'] = math.ceil(amount / part['multiplier']) * part['multiplier']
            part['unit_price'] = None
            part['total_price'] = None

            if amount == 0:
                part['amount'] = "!STOCK"
            elif amount < part['moq']:
                part['amount'] = "!MOQ"
            else:
                part['unit_price'] = get_unit_price(pd['pricing'], config.amount)
                part['total_price'] = part['amount'] * part['unit_price']

        if config.json_output:
            print(json.dumps(parts_found))
        else:
            rows = [ [part['manuf_name'], part['symbol'], part['moq'], part['multiplier'], 
                        pricing_data[part['symbol']]['stock'], format_pricing(pricing_data[part['symbol']]),
                        part['amount'], str(part['total_price']) ] for part in parts_found.values() 
                            if not part['amount'] in ('!STOCK', '!MOQ') or config.all_parts]
            print(tabulate(rows, tablefmt='grid', headers=['Manufacturer', 'Symbol', 'MOQ', 
                'Mult', 'Stock', 'Pricing', 'Amount', 'Total price']))

            # Python is proper lisp
            skipped_parts_count = len(list(
                filter(lambda part: part['amount'] in ('!STOCK', '!MOQ'), parts_found.values())
            ))

            if skipped_parts_count > 0:
                log.warn('some parts not displayed', count=skipped_parts_count)
